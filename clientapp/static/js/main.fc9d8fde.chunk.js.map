{"version":3,"sources":["components/tracks/Add.js","components/tracks/index.js","components/layout/navbar.js","components/layout/index.js","App.js","serviceWorker.js","index.js"],"names":["Add","state","songname","artistname","songfile","undefined","thumbnail","handleChange","e","target","name","setState","files","value","submitData","preventDefault","data","FormData","append","axios","post","then","response","console","log","catch","err","error","this","className","method","onSubmit","encType","type","onChange","required","style","height","multiple","accept","React","Component","Tracks","tracks","visible","LoadMore","prev","downloadHandler","filename","getAttribute","anchorEl","document","createElement","uri","concat","href","download","body","click","remove","URL","revokeObjectURL","Axios","get","map","track","key","Id","src","alt","width","song_name","artist_name","data-file","file_name","onClick","placeholder","children","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc9d8fde.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles.css';\r\nclass Add extends React.Component {\r\n    state = {\r\n        songname: '',\r\n        artistname: '',\r\n        songfile: undefined,\r\n        thumbnail: undefined\r\n    }\r\n    handleChange = e => {\r\n        if (e.target.name === 'songfile' || e.target.name === 'thumbnail') {\r\n            this.setState({\r\n                [e.target.name]: e.target.files[0]\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                [e.target.name]: e.target.value\r\n            });\r\n        }\r\n    }\r\n    submitData = (e) => {\r\n        e.preventDefault();\r\n        const { artistname, songfile, songname, thumbnail } = this.state;\r\n        const data = new FormData();\r\n        data.append(\"songname\", songname);\r\n        data.append(\"songfile\", songfile);\r\n        data.append(\"artistname\", artistname);\r\n        data.append(\"thumbnail\", thumbnail);\r\n        axios.post('/api/tracks/add', data)\r\n            .then(response => console.log(response))\r\n            .catch(err => console.error(err));\r\n    }\r\n    render() {\r\n        const { artistname, songname } = this.state;\r\n        return (\r\n            <div className=\"wrap\">\r\n                <div className=\"card\">\r\n                    <form method=\"post\" onSubmit={this.submitData} encType=\"multipart/form-data\">\r\n                        <div className=\"card-header text-center\">\r\n                            <strong className=\"h4\">Add New Song</strong>\r\n                        </div>\r\n                        {/* <Details handleChange={(e) => console.log(e.target)} /> */}\r\n                        <div className=\"card-body\">\r\n                            <div className=\"row flex-column align-items-center\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"input-group mb-3\">\r\n                                        <div className=\"input-group-prepend\">\r\n                                            <span className=\"input-group-text\">Song Name</span>\r\n                                        </div>\r\n                                        <input type=\"text\" value={songname} onChange={this.handleChange} className=\"form-control\" name=\"songname\" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"input-group mb-3\">\r\n                                        <div className=\"input-group-prepend\">\r\n                                            <span className=\"input-group-text\">Artist Name</span>\r\n                                        </div>\r\n                                        <input type=\"text\" value={artistname} onChange={this.handleChange} className=\"form-control\" name=\"artistname\" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12 mb-3\">\r\n                                    <div className=\"custom-file\">\r\n                                        <input name=\"songfile\" onChange={this.handleChange} type=\"file\" className=\"custom-file-input\" style={{ height: '40px' }} multiple={false} accept=\"audio/mp3\" required />\r\n                                        <label className=\"custom-file-label\">\r\n                                            Choose Song File\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12 mb-3\">\r\n                                    <div className=\"custom-file\">\r\n                                        <input type=\"file\" name=\"thumbnail\" onChange={this.handleChange} className=\"custom-file-input\" accept=\"image/*\" required />\r\n                                        <label className=\"custom-file-label\">\r\n                                            Choose Cover File\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary btn-block\">Save Changes</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n};\r\nexport default Add;","import React from 'react';\r\nimport Axios from 'axios';\r\nimport './styles.css';\r\n\r\nclass Tracks extends React.Component {\r\n    state = {\r\n        tracks: [],\r\n        visible: 2,\r\n        error: false\r\n    }\r\n    LoadMore = () => {\r\n        this.setState((prev) => {\r\n            return { visible: prev.visible + 4 }\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        Axios.get(`/api/tracks`)\r\n            .then(response => this.setState({ tracks: [...response.data.tracks] }));\r\n    }\r\n    downloadHandler = e => {\r\n        const filename = e.target.getAttribute('data-file');\r\n        const anchorEl = document.createElement('a');\r\n        const uri = \"/songs/\".concat(filename);\r\n        anchorEl.href = uri;\r\n        anchorEl.download = filename;\r\n        document.body.append(anchorEl);\r\n        anchorEl.click();\r\n        anchorEl.remove();\r\n        URL.revokeObjectURL(uri);\r\n    }\r\n    render() {\r\n        const { tracks } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {\r\n                        tracks.map(track =>\r\n                            (\r\n                                <div className=\"col-md-4\" key={track.Id}>\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-header\">\r\n                                            &nbsp;\r\n                                        </div>\r\n                                        <div className=\"card-body text-center\">\r\n                                            <img className=\"img-thumnail mb-2\" src={\"/thumbnails/\" + track.thumbnail} alt={track.thumbnail} style={{ height: '120px', width: '120x' }} />\r\n                                            <hr className=\"mb-3\" />\r\n                                            <div className=\"h6 text-left text-light mb-2\">\r\n                                                {track.song_name}\r\n                                            </div>\r\n                                            <div className=\"h6 text-left text-light\">\r\n                                                {track.artist_name}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"card-footer\">\r\n                                            <button data-file={track.file_name} onClick={this.downloadHandler} className=\"btn-custom\" style={{ width: '100%' }}><i className=\"fa fa-download\"></i> Download</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Tracks;","import React from 'react';\r\nexport default ()=>{\r\n    return(\r\n        <nav>\r\n            <ul className=\"nav-custom\">\r\n                <li className=\"nav-custom-brand\"><i className=\"fab fa-weebly fa-2x\"></i>idemusiq</li>\r\n                <li className=\"nav-custom-item\">\r\n                    <input type=\"text\" className=\"form-control search-item\" placeholder=\"Search\"/>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport './index.css';\r\nimport Navbar from './navbar';\r\nexport default ({children}) =>{\r\n    return(\r\n        <div className=\"overlay\">\r\n            <Navbar />\r\n            {children}\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport Add from './components/tracks/Add';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Tracks from './components/tracks';\nimport Layout from './components/layout';\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Layout>\n          <Route exact path='/' component={Tracks} />\n          <Route exact path='/add' component={Add} />\n        </Layout>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}